name: 'Release'

on:
  push:
    tags:
      - "**"
    branches-ignore:
      - "**"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

    services:
      zookeeper:
        image: zookeeper:3.8
        ports:
          - 2181:2181
      solr:
        image: solr:9
        ports:
          - 8983:8983
        env:
          ZK_HOST: zookeeper:2181
        options: -e cloud

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.7
      - name: Cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Set up GO
        uses: actions/setup-go@v5
        with:
          go-version: '^1.19.5'
          check-latest: true
      - name: Install siegfried
        run: |
          go install github.com/richardlehane/siegfried/cmd/sf@latest
          sf -update
      - name: Install clamdscan mock
        run: |
          sudo cp .github/workflows/bin/clamscan /usr/bin/clamscan
          sudo cp .github/workflows/bin/clamscan /usr/bin/clamdscan
          sudo chmod a+rx /usr/bin/clamscan /usr/bin/clamdscan
      - name: Run tests & install
        run:
          mvn $MAVEN_CLI_OPTS -Dtestng.groups="travis" -Proda-wui-docker -Denforcer.skip=true clean org.jacoco:jacoco-maven-plugin:prepare-agent install
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RODA_CORE_SOLR_TYPE: CLOUD
          RODA_CORE_SOLR_CLOUD_URLS: localhost:2181
      - name: Deploy to GitHub packages
        run: mvn $MAVEN_CLI_OPTS clean deploy -Dmaven.test.skip=true -Pcore
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Manipulate tag
        run: |
          echo "release_version=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV
          echo "major_version=$(cut -d '.' -f 1 <<< $GITHUB_REF_NAME)" >> $GITHUB_ENV
          echo "major_minor_version=$(cut -d '.' -f 1,2 <<< $GITHUB_REF_NAME)" >> $GITHUB_ENV
      - name: Upload artifact to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: roda-ui/roda-wui/target/roda-wui-${{ env.release_version }}.war
          asset_name: roda-wui-${{ env.release_version }}.war
          tag: ${{ github.ref }}
          release_name: ${{ github.ref_name }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy to GitHub Container Registry
        run: |
          docker tag keeps/roda:latest ghcr.io/keeps/roda:${{ github.ref_name }}
          docker push ghcr.io/keeps/roda:${{ github.ref_name }}
      - name: Deploy to GitHub Container Registry (alias)
        if: ${{ !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'RC') }}
        run: |
          docker tag keeps/roda:latest ghcr.io/keeps/roda:${{ env.major_version }}
          docker push ghcr.io/keeps/roda:${{ env.major_version }}
          docker tag keeps/roda:latest ghcr.io/keeps/roda:${{ env.major_minor_version }}
          docker push ghcr.io/keeps/roda:${{ env.major_minor_version }}
      - name: Trigger KEEPS GitLab CI/CD
        run: |
          curl --progress-bar -o /dev/null -L --request POST \
               --form ref=master \
               --form token=${{ secrets.GITLAB_RODA_DEV_TRIGGER_TOKEN }} \
               --form "variables[DOCKER_TAG]=${{ github.ref_name }}" \
               ${{ secrets.GITLAB_RODA_DEV_TRIGGER }}

#  update-release-notes:
#    needs: [build]
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#      - name: Install dependencies
#        run: npm install github-release-notes -g
#      - name: Get release version
#        id: release_version
#        run: echo ::set-output name=result::${GITHUB_REF/refs\/tags\/v/}
#      - name: Update release notes
#        run: gren release -d --tags=v{{ steps.release_version.outputs.result }} --data-source=milestones --milestone-match="{{ steps.release_version.outputs.result }}" --override
#        env:
#          GREN_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#