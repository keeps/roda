<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions targetNamespace="http://services.core.roda.dgarq.gov.pt" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://services.core.roda.dgarq.gov.pt" xmlns:intf="http://services.core.roda.dgarq.gov.pt" xmlns:tns1="http://data.core.roda.dgarq.gov.pt" xmlns:tns2="http://common.core.roda.dgarq.gov.pt" xmlns:tns3="http://filter.adapter.data.core.roda.dgarq.gov.pt" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<!--WSDL created by Apache Axis version: 1.4
Built on Apr 22, 2006 (06:55:48 PDT)-->
 <wsdl:types>
  <schema elementFormDefault="qualified" targetNamespace="http://services.core.roda.dgarq.gov.pt" xmlns="http://www.w3.org/2001/XMLSchema">
   <import namespace="http://data.core.roda.dgarq.gov.pt"/>
   <import namespace="http://common.core.roda.dgarq.gov.pt"/>
   <import namespace="http://filter.adapter.data.core.roda.dgarq.gov.pt"/>
   <element name="registerUser">
    <complexType>
     <sequence>
      <element name="user" type="tns1:User"/>
      <element name="password" type="xsd:string"/>
     </sequence>
    </complexType>
   </element>
   <complexType name="ArrayOf_xsd_string">
    <sequence>
     <element maxOccurs="unbounded" minOccurs="0" name="item" type="xsd:string"/>
    </sequence>
   </complexType>
   <element name="registerUserResponse">
    <complexType>
     <sequence>
      <element name="registerUserReturn" type="tns1:User"/>
     </sequence>
    </complexType>
   </element>
   <element name="fault" type="tns2:UserAlreadyExistsException"/>
   <element name="fault1" type="tns2:EmailAlreadyExistsException"/>
   <element name="fault2" type="tns2:UserRegistrationException"/>
   <element name="modifyUnconfirmedEmail">
    <complexType>
     <sequence>
      <element name="username" type="xsd:string"/>
      <element name="email" type="xsd:string"/>
     </sequence>
    </complexType>
   </element>
   <element name="modifyUnconfirmedEmailResponse">
    <complexType>
     <sequence>
      <element name="modifyUnconfirmedEmailReturn" type="tns1:User"/>
     </sequence>
    </complexType>
   </element>
   <element name="fault3" type="tns2:IllegalOperationException"/>
   <element name="fault4" type="tns2:NoSuchUserException"/>
   <element name="confirmUserEmail">
    <complexType>
     <sequence>
      <element name="username" type="xsd:string"/>
      <element name="email" type="xsd:string"/>
      <element name="emailConfirmationToken" type="xsd:string"/>
     </sequence>
    </complexType>
   </element>
   <element name="confirmUserEmailResponse">
    <complexType>
     <sequence>
      <element name="confirmUserEmailReturn" type="tns1:User"/>
     </sequence>
    </complexType>
   </element>
   <element name="fault5" type="tns2:InvalidTokenException"/>
   <element name="resetUserPassword">
    <complexType>
     <sequence>
      <element name="username" type="xsd:string"/>
      <element name="password" type="xsd:string"/>
      <element name="resetPasswordToken" type="xsd:string"/>
     </sequence>
    </complexType>
   </element>
   <element name="resetUserPasswordResponse">
    <complexType>
     <sequence>
      <element name="resetUserPasswordReturn" type="tns1:User"/>
     </sequence>
    </complexType>
   </element>
   <element name="getUnconfirmedUser">
    <complexType>
     <sequence>
      <element name="username" type="xsd:string"/>
     </sequence>
    </complexType>
   </element>
   <element name="getUnconfirmedUserResponse">
    <complexType>
     <sequence>
      <element name="getUnconfirmedUserReturn" type="tns1:User"/>
     </sequence>
    </complexType>
   </element>
   <element name="requestPasswordReset">
    <complexType>
     <sequence>
      <element name="username" type="xsd:string"/>
      <element name="email" type="xsd:string"/>
     </sequence>
    </complexType>
   </element>
   <element name="requestPasswordResetResponse">
    <complexType>
     <sequence>
      <element name="requestPasswordResetReturn" type="tns1:User"/>
     </sequence>
    </complexType>
   </element>
  </schema>
  <schema elementFormDefault="qualified" targetNamespace="http://data.core.roda.dgarq.gov.pt" xmlns="http://www.w3.org/2001/XMLSchema">
   <import namespace="http://common.core.roda.dgarq.gov.pt"/>
   <import namespace="http://filter.adapter.data.core.roda.dgarq.gov.pt"/>
   <import namespace="http://services.core.roda.dgarq.gov.pt"/>
   <complexType name="RODAMember">
    <sequence>
     <element name="active" type="xsd:boolean"/>
     <element name="allGroups" nillable="true" type="impl:ArrayOf_xsd_string"/>
     <element name="directRoles" nillable="true" type="impl:ArrayOf_xsd_string"/>
     <element name="fullName" nillable="true" type="xsd:string"/>
     <element name="groups" nillable="true" type="impl:ArrayOf_xsd_string"/>
     <element name="name" nillable="true" type="xsd:string"/>
     <element name="roles" nillable="true" type="impl:ArrayOf_xsd_string"/>
    </sequence>
   </complexType>
   <complexType name="User">
    <complexContent>
     <extension base="tns1:RODAMember">
      <sequence>
       <element name="birthCountry" nillable="true" type="xsd:string"/>
       <element name="businessCategory" nillable="true" type="xsd:string"/>
       <element name="countryName" nillable="true" type="xsd:string"/>
       <element name="email" nillable="true" type="xsd:string"/>
       <element name="emailConfirmationToken" nillable="true" type="xsd:string"/>
       <element name="emailConfirmationTokenExpirationDate" nillable="true" type="xsd:string"/>
       <element name="fax" nillable="true" type="xsd:string"/>
       <element name="financeIdentificationNumber" nillable="true" type="xsd:string"/>
       <element name="idDocument" nillable="true" type="xsd:string"/>
       <element name="idDocumentDate" nillable="true" type="xsd:dateTime"/>
       <element name="idDocumentLocation" nillable="true" type="xsd:string"/>
       <element name="idDocumentType" nillable="true" type="xsd:string"/>
       <element name="localityName" nillable="true" type="xsd:string"/>
       <element name="postalAddress" nillable="true" type="xsd:string"/>
       <element name="postalCode" nillable="true" type="xsd:string"/>
       <element name="resetPasswordToken" nillable="true" type="xsd:string"/>
       <element name="resetPasswordTokenExpirationDate" nillable="true" type="xsd:string"/>
       <element name="telephoneNumber" nillable="true" type="xsd:string"/>
      </sequence>
     </extension>
    </complexContent>
   </complexType>
  </schema>
  <schema elementFormDefault="qualified" targetNamespace="http://common.core.roda.dgarq.gov.pt" xmlns="http://www.w3.org/2001/XMLSchema">
   <import namespace="http://data.core.roda.dgarq.gov.pt"/>
   <import namespace="http://filter.adapter.data.core.roda.dgarq.gov.pt"/>
   <import namespace="http://services.core.roda.dgarq.gov.pt"/>
   <complexType abstract="true" name="RODAException">
    <sequence>
     <element name="message" nillable="true" type="xsd:string"/>
    </sequence>
   </complexType>
   <complexType name="RODAServiceException">
    <complexContent>
     <extension base="tns2:RODAException">
      <sequence/>
     </extension>
    </complexContent>
   </complexType>
   <complexType name="UserManagementException">
    <complexContent>
     <extension base="tns2:RODAServiceException">
      <sequence/>
     </extension>
    </complexContent>
   </complexType>
   <complexType name="UserAlreadyExistsException">
    <complexContent>
     <extension base="tns2:UserManagementException">
      <sequence/>
     </extension>
    </complexContent>
   </complexType>
   <complexType name="UserRegistrationException">
    <complexContent>
     <extension base="tns2:RODAServiceException">
      <sequence/>
     </extension>
    </complexContent>
   </complexType>
   <complexType name="EmailAlreadyExistsException">
    <complexContent>
     <extension base="tns2:UserRegistrationException">
      <sequence/>
     </extension>
    </complexContent>
   </complexType>
   <complexType name="IllegalOperationException">
    <complexContent>
     <extension base="tns2:RODAServiceException">
      <sequence/>
     </extension>
    </complexContent>
   </complexType>
   <complexType name="NoSuchUserException">
    <complexContent>
     <extension base="tns2:RODAServiceException">
      <sequence/>
     </extension>
    </complexContent>
   </complexType>
   <complexType name="InvalidTokenException">
    <complexContent>
     <extension base="tns2:UserRegistrationException">
      <sequence/>
     </extension>
    </complexContent>
   </complexType>
  </schema>
  <schema elementFormDefault="qualified" targetNamespace="http://filter.adapter.data.core.roda.dgarq.gov.pt" xmlns="http://www.w3.org/2001/XMLSchema">
   <import namespace="http://data.core.roda.dgarq.gov.pt"/>
   <import namespace="http://common.core.roda.dgarq.gov.pt"/>
   <import namespace="http://services.core.roda.dgarq.gov.pt"/>
   <complexType abstract="true" name="FilterParameter">
    <sequence>
     <element name="name" nillable="true" type="xsd:string"/>
    </sequence>
   </complexType>
   <complexType name="SimpleFilterParameter">
    <complexContent>
     <extension base="tns3:FilterParameter">
      <sequence>
       <element name="value" nillable="true" type="xsd:string"/>
      </sequence>
     </extension>
    </complexContent>
   </complexType>
   <complexType name="OneOfManyFilterParameter">
    <complexContent>
     <extension base="tns3:FilterParameter">
      <sequence>
       <element name="values" nillable="true" type="impl:ArrayOf_xsd_string"/>
      </sequence>
     </extension>
    </complexContent>
   </complexType>
   <complexType name="RangeFilterParameter">
    <complexContent>
     <extension base="tns3:FilterParameter">
      <sequence>
       <element name="fromValue" nillable="true" type="xsd:string"/>
       <element name="toValue" nillable="true" type="xsd:string"/>
      </sequence>
     </extension>
    </complexContent>
   </complexType>
   <complexType name="RegexFilterParameter">
    <complexContent>
     <extension base="tns3:FilterParameter">
      <sequence>
       <element name="regex" nillable="true" type="xsd:string"/>
      </sequence>
     </extension>
    </complexContent>
   </complexType>
   <complexType name="ProducerFilterParameter">
    <complexContent>
     <extension base="tns3:FilterParameter">
      <sequence>
       <element name="groups" nillable="true" type="impl:ArrayOf_xsd_string"/>
       <element name="username" nillable="true" type="xsd:string"/>
      </sequence>
     </extension>
    </complexContent>
   </complexType>
   <complexType name="LikeFilterParameter">
    <complexContent>
     <extension base="tns3:FilterParameter">
      <sequence>
       <element name="expression" nillable="true" type="xsd:string"/>
      </sequence>
     </extension>
    </complexContent>
   </complexType>
  </schema>
 </wsdl:types>

   <wsdl:message name="getUnconfirmedUserRequest">

      <wsdl:part element="impl:getUnconfirmedUser" name="parameters"/>

   </wsdl:message>

   <wsdl:message name="resetUserPasswordRequest">

      <wsdl:part element="impl:resetUserPassword" name="parameters"/>

   </wsdl:message>

   <wsdl:message name="IllegalOperationException">

      <wsdl:part element="impl:fault3" name="fault"/>

   </wsdl:message>

   <wsdl:message name="confirmUserEmailRequest">

      <wsdl:part element="impl:confirmUserEmail" name="parameters"/>

   </wsdl:message>

   <wsdl:message name="requestPasswordResetRequest">

      <wsdl:part element="impl:requestPasswordReset" name="parameters"/>

   </wsdl:message>

   <wsdl:message name="EmailAlreadyExistsException">

      <wsdl:part element="impl:fault1" name="fault"/>

   </wsdl:message>

   <wsdl:message name="registerUserRequest">

      <wsdl:part element="impl:registerUser" name="parameters"/>

   </wsdl:message>

   <wsdl:message name="UserAlreadyExistsException">

      <wsdl:part element="impl:fault" name="fault"/>

   </wsdl:message>

   <wsdl:message name="UserRegistrationException">

      <wsdl:part element="impl:fault2" name="fault"/>

   </wsdl:message>

   <wsdl:message name="InvalidTokenException">

      <wsdl:part element="impl:fault5" name="fault"/>

   </wsdl:message>

   <wsdl:message name="getUnconfirmedUserResponse">

      <wsdl:part element="impl:getUnconfirmedUserResponse" name="parameters"/>

   </wsdl:message>

   <wsdl:message name="modifyUnconfirmedEmailResponse">

      <wsdl:part element="impl:modifyUnconfirmedEmailResponse" name="parameters"/>

   </wsdl:message>

   <wsdl:message name="resetUserPasswordResponse">

      <wsdl:part element="impl:resetUserPasswordResponse" name="parameters"/>

   </wsdl:message>

   <wsdl:message name="requestPasswordResetResponse">

      <wsdl:part element="impl:requestPasswordResetResponse" name="parameters"/>

   </wsdl:message>

   <wsdl:message name="confirmUserEmailResponse">

      <wsdl:part element="impl:confirmUserEmailResponse" name="parameters"/>

   </wsdl:message>

   <wsdl:message name="NoSuchUserException">

      <wsdl:part element="impl:fault4" name="fault"/>

   </wsdl:message>

   <wsdl:message name="modifyUnconfirmedEmailRequest">

      <wsdl:part element="impl:modifyUnconfirmedEmail" name="parameters"/>

   </wsdl:message>

   <wsdl:message name="registerUserResponse">

      <wsdl:part element="impl:registerUserResponse" name="parameters"/>

   </wsdl:message>

   <wsdl:portType name="UserRegistration">

      <wsdl:operation name="registerUser">

         <wsdl:input message="impl:registerUserRequest" name="registerUserRequest"/>

         <wsdl:output message="impl:registerUserResponse" name="registerUserResponse"/>

         <wsdl:fault message="impl:UserRegistrationException" name="UserRegistrationException"/>

         <wsdl:fault message="impl:UserAlreadyExistsException" name="UserAlreadyExistsException"/>

         <wsdl:fault message="impl:EmailAlreadyExistsException" name="EmailAlreadyExistsException"/>

      </wsdl:operation>

      <wsdl:operation name="modifyUnconfirmedEmail">

         <wsdl:input message="impl:modifyUnconfirmedEmailRequest" name="modifyUnconfirmedEmailRequest"/>

         <wsdl:output message="impl:modifyUnconfirmedEmailResponse" name="modifyUnconfirmedEmailResponse"/>

         <wsdl:fault message="impl:UserRegistrationException" name="UserRegistrationException"/>

         <wsdl:fault message="impl:NoSuchUserException" name="NoSuchUserException"/>

         <wsdl:fault message="impl:IllegalOperationException" name="IllegalOperationException"/>

      </wsdl:operation>

      <wsdl:operation name="confirmUserEmail">

         <wsdl:input message="impl:confirmUserEmailRequest" name="confirmUserEmailRequest"/>

         <wsdl:output message="impl:confirmUserEmailResponse" name="confirmUserEmailResponse"/>

         <wsdl:fault message="impl:UserRegistrationException" name="UserRegistrationException"/>

         <wsdl:fault message="impl:InvalidTokenException" name="InvalidTokenException"/>

         <wsdl:fault message="impl:NoSuchUserException" name="NoSuchUserException"/>

      </wsdl:operation>

      <wsdl:operation name="resetUserPassword">

         <wsdl:input message="impl:resetUserPasswordRequest" name="resetUserPasswordRequest"/>

         <wsdl:output message="impl:resetUserPasswordResponse" name="resetUserPasswordResponse"/>

         <wsdl:fault message="impl:UserRegistrationException" name="UserRegistrationException"/>

         <wsdl:fault message="impl:InvalidTokenException" name="InvalidTokenException"/>

         <wsdl:fault message="impl:NoSuchUserException" name="NoSuchUserException"/>

         <wsdl:fault message="impl:IllegalOperationException" name="IllegalOperationException"/>

      </wsdl:operation>

      <wsdl:operation name="getUnconfirmedUser">

         <wsdl:input message="impl:getUnconfirmedUserRequest" name="getUnconfirmedUserRequest"/>

         <wsdl:output message="impl:getUnconfirmedUserResponse" name="getUnconfirmedUserResponse"/>

         <wsdl:fault message="impl:UserRegistrationException" name="UserRegistrationException"/>

         <wsdl:fault message="impl:NoSuchUserException" name="NoSuchUserException"/>

         <wsdl:fault message="impl:IllegalOperationException" name="IllegalOperationException"/>

      </wsdl:operation>

      <wsdl:operation name="requestPasswordReset">

         <wsdl:input message="impl:requestPasswordResetRequest" name="requestPasswordResetRequest"/>

         <wsdl:output message="impl:requestPasswordResetResponse" name="requestPasswordResetResponse"/>

         <wsdl:fault message="impl:UserRegistrationException" name="UserRegistrationException"/>

         <wsdl:fault message="impl:NoSuchUserException" name="NoSuchUserException"/>

         <wsdl:fault message="impl:IllegalOperationException" name="IllegalOperationException"/>

      </wsdl:operation>

   </wsdl:portType>

   <wsdl:binding name="UserRegistrationSoapBinding" type="impl:UserRegistration">

      <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>

      <wsdl:operation name="registerUser">

         <wsdlsoap:operation soapAction=""/>

         <wsdl:input name="registerUserRequest">

            <wsdlsoap:body use="literal"/>

         </wsdl:input>

         <wsdl:output name="registerUserResponse">

            <wsdlsoap:body use="literal"/>

         </wsdl:output>

         <wsdl:fault name="UserRegistrationException">

            <wsdlsoap:fault name="UserRegistrationException" use="literal"/>

         </wsdl:fault>

         <wsdl:fault name="UserAlreadyExistsException">

            <wsdlsoap:fault name="UserAlreadyExistsException" use="literal"/>

         </wsdl:fault>

         <wsdl:fault name="EmailAlreadyExistsException">

            <wsdlsoap:fault name="EmailAlreadyExistsException" use="literal"/>

         </wsdl:fault>

      </wsdl:operation>

      <wsdl:operation name="modifyUnconfirmedEmail">

         <wsdlsoap:operation soapAction=""/>

         <wsdl:input name="modifyUnconfirmedEmailRequest">

            <wsdlsoap:body use="literal"/>

         </wsdl:input>

         <wsdl:output name="modifyUnconfirmedEmailResponse">

            <wsdlsoap:body use="literal"/>

         </wsdl:output>

         <wsdl:fault name="UserRegistrationException">

            <wsdlsoap:fault name="UserRegistrationException" use="literal"/>

         </wsdl:fault>

         <wsdl:fault name="NoSuchUserException">

            <wsdlsoap:fault name="NoSuchUserException" use="literal"/>

         </wsdl:fault>

         <wsdl:fault name="IllegalOperationException">

            <wsdlsoap:fault name="IllegalOperationException" use="literal"/>

         </wsdl:fault>

      </wsdl:operation>

      <wsdl:operation name="confirmUserEmail">

         <wsdlsoap:operation soapAction=""/>

         <wsdl:input name="confirmUserEmailRequest">

            <wsdlsoap:body use="literal"/>

         </wsdl:input>

         <wsdl:output name="confirmUserEmailResponse">

            <wsdlsoap:body use="literal"/>

         </wsdl:output>

         <wsdl:fault name="UserRegistrationException">

            <wsdlsoap:fault name="UserRegistrationException" use="literal"/>

         </wsdl:fault>

         <wsdl:fault name="InvalidTokenException">

            <wsdlsoap:fault name="InvalidTokenException" use="literal"/>

         </wsdl:fault>

         <wsdl:fault name="NoSuchUserException">

            <wsdlsoap:fault name="NoSuchUserException" use="literal"/>

         </wsdl:fault>

      </wsdl:operation>

      <wsdl:operation name="resetUserPassword">

         <wsdlsoap:operation soapAction=""/>

         <wsdl:input name="resetUserPasswordRequest">

            <wsdlsoap:body use="literal"/>

         </wsdl:input>

         <wsdl:output name="resetUserPasswordResponse">

            <wsdlsoap:body use="literal"/>

         </wsdl:output>

         <wsdl:fault name="UserRegistrationException">

            <wsdlsoap:fault name="UserRegistrationException" use="literal"/>

         </wsdl:fault>

         <wsdl:fault name="InvalidTokenException">

            <wsdlsoap:fault name="InvalidTokenException" use="literal"/>

         </wsdl:fault>

         <wsdl:fault name="NoSuchUserException">

            <wsdlsoap:fault name="NoSuchUserException" use="literal"/>

         </wsdl:fault>

         <wsdl:fault name="IllegalOperationException">

            <wsdlsoap:fault name="IllegalOperationException" use="literal"/>

         </wsdl:fault>

      </wsdl:operation>

      <wsdl:operation name="getUnconfirmedUser">

         <wsdlsoap:operation soapAction=""/>

         <wsdl:input name="getUnconfirmedUserRequest">

            <wsdlsoap:body use="literal"/>

         </wsdl:input>

         <wsdl:output name="getUnconfirmedUserResponse">

            <wsdlsoap:body use="literal"/>

         </wsdl:output>

         <wsdl:fault name="UserRegistrationException">

            <wsdlsoap:fault name="UserRegistrationException" use="literal"/>

         </wsdl:fault>

         <wsdl:fault name="NoSuchUserException">

            <wsdlsoap:fault name="NoSuchUserException" use="literal"/>

         </wsdl:fault>

         <wsdl:fault name="IllegalOperationException">

            <wsdlsoap:fault name="IllegalOperationException" use="literal"/>

         </wsdl:fault>

      </wsdl:operation>

      <wsdl:operation name="requestPasswordReset">

         <wsdlsoap:operation soapAction=""/>

         <wsdl:input name="requestPasswordResetRequest">

            <wsdlsoap:body use="literal"/>

         </wsdl:input>

         <wsdl:output name="requestPasswordResetResponse">

            <wsdlsoap:body use="literal"/>

         </wsdl:output>

         <wsdl:fault name="UserRegistrationException">

            <wsdlsoap:fault name="UserRegistrationException" use="literal"/>

         </wsdl:fault>

         <wsdl:fault name="NoSuchUserException">

            <wsdlsoap:fault name="NoSuchUserException" use="literal"/>

         </wsdl:fault>

         <wsdl:fault name="IllegalOperationException">

            <wsdlsoap:fault name="IllegalOperationException" use="literal"/>

         </wsdl:fault>

      </wsdl:operation>

   </wsdl:binding>

   <wsdl:service name="UserRegistrationService">

      <wsdl:port binding="impl:UserRegistrationSoapBinding" name="UserRegistration">

         <wsdlsoap:address location="http://localhost:8080/roda-core/services/UserRegistration"/>

      </wsdl:port>

   </wsdl:service>

</wsdl:definitions>
